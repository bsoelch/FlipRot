#_ Library of elementar macros _#
#ifndef $$core$$
#def $$core$$ #enddef

#_ crashes the program though a illegal heap access_#
#def CRASH swap 0x80000000000000 swap store #enddef

#def SYS_REG_CALL  0 #enddef

#def CALL_HEAP_RESIZE 0 #enddef
#def CALL_READ        1 #enddef
#def CALL_WRITE       2 #enddef

#_ Sys registers names _#
#def SYS_REG_HEAP_SIZE 1 #enddef
#def SYS_REG_FD        1 #enddef
#def SYS_REG_DATA      2 #enddef
#def SYS_REG_COUNT     3 #enddef

#_ File descriptors for default streams_#
#def STD_IN  0 #enddef
#def STD_OUT 1 #enddef
#def STD_ERR 2 #enddef


#_ rotation operations _#
#def >>1  rot       #enddef
#def >>2  >>1  >>1  #enddef
#def >>4  >>2  >>2  #enddef
#def >>8  >>4  >>4  #enddef
#def >>16 >>8  >>8  #enddef
#def >>32 >>16 >>16 #enddef

#def <<32 >>32      #enddef
#def <<16 <<32 >>16 #enddef
#def <<8  <<16 >>8  #enddef
#def <<4  <<8  >>4  #enddef
#def <<2  <<4  >>2  #enddef
#def <<1  <<2  >>1  #enddef

#_ flip then rot _#
#def flipRot flip rot #enddef

#_ sets the lowest bit to 1 _#
#def set
#undef set.jump
swap
set.jump
swap
jumpif 
flip
#label set.jump
#undef set.jump
#enddef

#_ sets the lowest bit to 0 _#
#def clear set flip #enddef

#_ macros for clearing/setting the lower N bits _#
#def setrot   set      rot      #enddef
#def setrot2  setrot   setrot   #enddef
#def setrot4  setrot2  setrot2  #enddef
#def setrot8  setrot4  setrot4  #enddef
#def setrot16 setrot8  setrot8  #enddef
#def setrot32 setrot16 setrot16 #enddef

#def set2  setrot2  <<2  #enddef
#def set4  setrot4  <<4  #enddef
#def set8  setrot8  <<8  #enddef
#def set16 setrot16 <<16 #enddef
#def set32 setrot32 <<32 #enddef

#def clearrot   clear      rot        #enddef
#def clearrot2  clearrot   clearrot   #enddef
#def clearrot4  clearrot2  clearrot2  #enddef
#def clearrot8  clearrot4  clearrot4  #enddef
#def clearrot16 clearrot8  clearrot8  #enddef
#def clearrot32 clearrot16 clearrot16 #enddef

#def clear2  clearrot2  <<2  #enddef
#def clear4  clearrot4  <<4  #enddef
#def clear8  clearrot8  <<8  #enddef
#def clear16 clearrot16 <<16 #enddef
#def clear32 clearrot32 <<32 #enddef

#_ only keep lower 32 bits _#
#def (int) >>32 clear32 <<32 #enddef

#_ only keep lower 8 bits _#
#def (byte) >>8 clear32 >>32 clear16 >>16 clear8 >>8 #enddef

#endif