#_ increment and decrement 
Signature of inc/dec functions:
Input: 
 var1: value to increment
 tmp_loop: number of bits (unary)
Uses:
 tmp_ret: return address
Output:
 var1: incremented number

Signature of inc/dec macros:
Input: 
 main resister
Uses:
 var1, tmp_loop, tmp_ret
Output:
 main resister

_#
#include core
#include stack

#ifndef $$inc$$
#_ skip code section_#
$$inc$$ swap 1 jumpif


#_ TODO handle tmp_loop == UINT64_MAX _#

#_ increments the value in var1 _#
#label $$inc$$.inc 
#undef $$inc$$.inc.loop
#undef $$inc$$.inc.break
#undef $$inc$$.inc.reset
tmp_ret swap store #_ save return address _#
#label $$inc$$.inc.loop
var1 swap var1 load flip store #_ flip lowest bit of var1 _#
swap $$inc$$.inc.break swap
jumpif
swap var1 swap rot store
tmp_loop swap tmp_loop load rot store
swap $$inc$$.inc.loop swap
jumpif #_ jump to loop if rotation count not yet reached _#
swap $$inc$$.inc.reset swap 
1 jumpif #_ jump to reset _#
#label $$inc$$.inc.break
var1 swap var1 load rot store
tmp_loop swap tmp_loop load rot store
swap $$inc$$.inc.break swap
jumpif #_ jump to break if rotation count not yet reached _#
swap $$inc$$.inc.reset swap 
1 jumpif #_ jump to reset _#
#label $$inc$$.inc.reset
var1 swap var1 load rot store
tmp_loop swap tmp_loop load rot store
swap $$inc$$.inc.reset swap flip jumpif #_ rotate while tmp_loop[0] is 0 _#

#undef $$inc$$.inc.loop
#undef $$inc$$.inc.break
#undef $$inc$$.inc.reset
tmp_ret load swap #_ load return address _#
1 jumpif
#_ end of $$inc$$.inc _#


#_ decrements the value in var1 _#
#label $$inc$$.dec
#undef $$inc$$.dec.loop1
#undef $$inc$$.dec.break
#undef $$inc$$.dec.loop2
#undef $$inc$$.dec.reset
tmp_ret swap store #_ save return address _#
#label $$inc$$.dec.loop1
stack_prt swap stack_prt load
swap $$inc$$.dec.break swap
jumpif
swap stack_prt swap flip rot store #_ flip lowest bit of stack_prt _#
tmp_loop swap tmp_loop load rot store
swap $$inc$$.dec.loop1 swap 
jumpif #_ jump to loop1 if rotation count not yet reached _#
swap $$inc$$.dec.reset swap 
1 jumpif #_ jump to reset _#
#label $$inc$$.dec.break
swap stack_prt swap flip store
#label $$inc$$.dec.loop2
stack_prt swap stack_prt load rot store
tmp_loop swap tmp_loop load rot store
swap $$inc$$.dec.loop2 swap 
jumpif #_ jump to loop2 if rotation count not yet reached _#
#label $$inc$$.dec.reset
var1 swap var1 load rot store
tmp_loop swap tmp_loop load rot store
swap $$inc$$.dec.reset swap flip jumpif #_ rotate while tmp_loop[0] is 0 _#

#undef $$inc$$.dec.loop1
#undef $$inc$$.dec.break
#undef $$inc$$.dec.loop2
#undef $$inc$$.dec.reset
tmp_ret load swap #_ load return address _#
1 jumpif
#_ end of $$inc$$.dec _#

#def inc8 
swap var1 swap store #_ store target in var1 _#
tmp_loop swap 0xff store #_ unary 8 _#
$$inc$$.inc swap 1 jumpif #_ perform operation _#
var1 load #_ load result _#
#enddef
#def inc16 
swap var1 swap store #_ store target in var1 _#
tmp_loop swap 0xffff store #_ unary 8 _#
$$inc$$.inc swap 1 jumpif #_ perform operation _#
var1 load #_ load result _#
#enddef
#def inc32 
swap var1 swap store #_ store target in var1 _#
tmp_loop swap 0xffffffff store #_ unary 8 _#
$$inc$$.inc swap 1 jumpif #_ perform operation _#
var1 load #_ load result _#
#enddef
#_ TODO inc64 ($$inc$$.inc) work only with less than 64 bits _#

#def dec8 
swap var1 swap store #_ store target in var1 _#
tmp_loop swap 0xff store #_ unary 8 _#
$$inc$$.dec swap 1 jumpif #_ perform operation _#
var1 load #_ load result _#
#enddef
#def dec6 
swap var1 swap store #_ store target in var1 _#
tmp_loop swap 0xffff store #_ unary 8 _#
$$inc$$.dec swap 1 jumpif #_ perform operation _#
var1 load #_ load result _#
#enddef
#def dec32 
swap var1 swap store #_ store target in var1 _#
tmp_loop swap 0xffffffff store #_ unary 8 _#
$$inc$$.dec swap 1 jumpif #_ perform operation _#
var1 load #_ load result _#
#enddef
#_ TODO dec64 ($$inc$$.dec) work only with less than 64 bits _#

#_ skip code section_#
#label $$inc$$
#endif